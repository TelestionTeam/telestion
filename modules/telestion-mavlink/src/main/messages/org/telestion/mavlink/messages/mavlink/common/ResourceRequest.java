package org.telestion.mavlink.messages.mavlink.common;

import org.telestion.adapter.mavlink.annotation.MavField;
import org.telestion.adapter.mavlink.annotation.MavInfo;
import org.telestion.adapter.mavlink.annotation.NativeType;
import org.telestion.adapter.mavlink.annotation.MavArray;
import org.telestion.adapter.mavlink.message.MavlinkMessage;

import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * The autopilot is requesting a resource (file, binary, other type of data)</br>
 * </br>
 * <i>Autogenerated by XML2Record-Tool v1.3.7</i>
 * 
 * @author Autogenerated by XML2Record-Tool (by Cedric Boes)
 * @version 1.0 (autogenerated)
 */
@MavInfo(id = 142, crc = 72)
@SuppressWarnings("preview")
public record ResourceRequest(
        /**
         * Request ID. This ID should be re-used when sending back URI contents</br>
         * </br>
         * <i>Autogenerated by XML2Record-Tool v1.3.7</i>
         */
        @MavField(nativeType = NativeType.UINT_8)
        @JsonProperty int requestId, 
        /**
         * The type of requested URI. 0 = a file via URL. 1 = a UAVCAN binary</br>
         * </br>
         * <i>Autogenerated by XML2Record-Tool v1.3.7</i>
         */
        @MavField(nativeType = NativeType.UINT_8)
        @JsonProperty int uriType, 
        /**
         * The requested unique resource identifier (URI). It is not necessarily a straight domain name (depends on the URI type enum)</br>
         * </br>
         * <i>Autogenerated by XML2Record-Tool v1.3.7</i>
         */
        @MavArray(length = 120)
        @MavField(nativeType = NativeType.UINT_8)
        @JsonProperty int[] uri, 
        /**
         * The way the autopilot wants to receive the URI. 0 = MAVLink FTP. 1 = binary stream.</br>
         * </br>
         * <i>Autogenerated by XML2Record-Tool v1.3.7</i>
         */
        @MavField(nativeType = NativeType.UINT_8)
        @JsonProperty int transferType, 
        /**
         * The storage path the autopilot wants the URI to be stored in. Will only be valid if the transfer_type has a storage associated (e.g. MAVLink FTP).</br>
         * </br>
         * <i>Autogenerated by XML2Record-Tool v1.3.7</i>
         */
        @MavArray(length = 120)
        @MavField(nativeType = NativeType.UINT_8)
        @JsonProperty int[] storage) implements MavlinkMessage {
    /**
     * There shall be no default-constructor for normal developers.
     */
    @SuppressWarnings("unused")
    private ResourceRequest() {
        this(0, 0, null, 0, null);
    }
}